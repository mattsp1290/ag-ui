package events

import (
	"sync"
	"sync/atomic"
	"testing"
	"time"
)

// MutexCounter is a traditional mutex-based counter for comparison
type MutexCounter struct {
	value int64
	mutex sync.RWMutex
}

func NewMutexCounter() *MutexCounter {
	return &MutexCounter{}
}

func (c *MutexCounter) Inc() int64 {
	c.mutex.Lock()
	defer c.mutex.Unlock()
	c.value++
	return c.value
}

func (c *MutexCounter) Add(delta int64) int64 {
	c.mutex.Lock()
	defer c.mutex.Unlock()
	c.value += delta
	return c.value
}

func (c *MutexCounter) Load() int64 {
	c.mutex.RLock()
	defer c.mutex.RUnlock()
	return c.value
}

// BenchmarkAtomicCounterInc benchmarks atomic counter increment
func BenchmarkAtomicCounterInc(b *testing.B) {
	counter := NewAtomicCounter()
	b.ResetTimer()
	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			counter.Inc()
		}
	})
}

// BenchmarkMutexCounterInc benchmarks mutex counter increment
func BenchmarkMutexCounterInc(b *testing.B) {
	counter := NewMutexCounter()
	b.ResetTimer()
	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			counter.Inc()
		}
	})
}

// BenchmarkAtomicCounterLoad benchmarks atomic counter load
func BenchmarkAtomicCounterLoad(b *testing.B) {
	counter := NewAtomicCounter()
	counter.Store(1000)
	b.ResetTimer()
	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			_ = counter.Load()
		}
	})
}

// BenchmarkMutexCounterLoad benchmarks mutex counter load
func BenchmarkMutexCounterLoad(b *testing.B) {
	counter := NewMutexCounter()
	counter.Add(1000)
	b.ResetTimer()
	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			_ = counter.Load()
		}
	})
}

// BenchmarkAtomicCounterMixed benchmarks mixed atomic counter operations
func BenchmarkAtomicCounterMixed(b *testing.B) {
	counter := NewAtomicCounter()
	b.ResetTimer()
	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			switch b.N % 4 {
			case 0:
				counter.Inc()
			case 1:
				counter.Add(5)
			case 2:
				_ = counter.Load()
			case 3:
				counter.CompareAndSwap(counter.Load(), counter.Load()+1)
			}
		}
	})
}

// BenchmarkMutexCounterMixed benchmarks mixed mutex counter operations
func BenchmarkMutexCounterMixed(b *testing.B) {
	counter := NewMutexCounter()
	b.ResetTimer()
	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			switch b.N % 3 {
			case 0:
				counter.Inc()
			case 1:
				counter.Add(5)
			case 2:
				_ = counter.Load()
			}
		}
	})
}

// BenchmarkRuleMetricRecordAtomic benchmarks atomic rule metric recording
func BenchmarkRuleMetricRecordAtomic(b *testing.B) {
	metric := NewRuleExecutionMetric("test-rule")
	duration := 100 * time.Millisecond
	b.ResetTimer()
	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			metric.RecordExecution(duration, true)
		}
	})
}

// OldRuleExecutionMetric is the original mutex-based implementation for comparison
type OldRuleExecutionMetric struct {
	RuleID        string
	ExecutionCount int64
	TotalDuration time.Duration
	MinDuration   time.Duration
	MaxDuration   time.Duration
	LastExecution time.Time
	ErrorCount    int64
	DurationBuckets []time.Duration
	BucketCounts    []int64
	mutex sync.RWMutex
}

func NewOldRuleExecutionMetric(ruleID string) *OldRuleExecutionMetric {
	return &OldRuleExecutionMetric{
		RuleID:          ruleID,
		MinDuration:     time.Duration(9223372036854775807), // math.MaxInt64
		DurationBuckets: []time.Duration{
			time.Millisecond,
			5 * time.Millisecond,
			10 * time.Millisecond,
			25 * time.Millisecond,
			50 * time.Millisecond,
			100 * time.Millisecond,
			250 * time.Millisecond,
			500 * time.Millisecond,
			time.Second,
			5 * time.Second,
		},
		BucketCounts: make([]int64, 10),
	}
}

func (m *OldRuleExecutionMetric) RecordExecution(duration time.Duration, success bool) {
	m.mutex.Lock()
	defer m.mutex.Unlock()
	
	m.ExecutionCount++
	m.TotalDuration += duration
	m.LastExecution = time.Now()
	
	if duration < m.MinDuration {
		m.MinDuration = duration
	}
	if duration > m.MaxDuration {
		m.MaxDuration = duration
	}
	
	if !success {
		m.ErrorCount++
	}
	
	// Update histogram buckets
	for i, bucket := range m.DurationBuckets {
		if duration <= bucket {
			m.BucketCounts[i]++
			break
		}
	}
}

// BenchmarkRuleMetricRecordMutex benchmarks mutex-based rule metric recording
func BenchmarkRuleMetricRecordMutex(b *testing.B) {
	metric := NewOldRuleExecutionMetric("test-rule")
	duration := 100 * time.Millisecond
	b.ResetTimer()
	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			metric.RecordExecution(duration, true)
		}
	})
}

// BenchmarkAtomicMinMaxUpdate benchmarks atomic min/max updates
func BenchmarkAtomicMinMaxUpdate(b *testing.B) {
	minMax := NewAtomicMinMax()
	duration := 100 * time.Millisecond
	b.ResetTimer()
	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			minMax.Update(duration)
		}
	})
}

// MutexMinMax is a traditional mutex-based min/max tracker for comparison
type MutexMinMax struct {
	min   time.Duration
	max   time.Duration
	mutex sync.RWMutex
}

func NewMutexMinMax() *MutexMinMax {
	return &MutexMinMax{
		min: time.Duration(9223372036854775807), // math.MaxInt64
		max: 0,
	}
}

func (mm *MutexMinMax) Update(duration time.Duration) {
	mm.mutex.Lock()
	defer mm.mutex.Unlock()
	
	if duration < mm.min {
		mm.min = duration
	}
	if duration > mm.max {
		mm.max = duration
	}
}

// BenchmarkMutexMinMaxUpdate benchmarks mutex-based min/max updates
func BenchmarkMutexMinMaxUpdate(b *testing.B) {
	minMax := NewMutexMinMax()
	duration := 100 * time.Millisecond
	b.ResetTimer()
	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			minMax.Update(duration)
		}
	})
}

// BenchmarkThroughputMetricRecord benchmarks throughput metric recording
func BenchmarkThroughputMetricRecord(b *testing.B) {
	metric := NewThroughputMetric(time.Minute, 100.0)
	duration := 10 * time.Millisecond
	b.ResetTimer()
	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			metric.RecordEvents(1, duration)
		}
	})
}

// BenchmarkAsyncMetricRecording benchmarks async metric recording
func BenchmarkAsyncMetricRecording(b *testing.B) {
	config := &AsyncMetricsConfig{
		BufferSize:     10000,
		WorkerCount:    4,
		FlushTimeout:   10 * time.Millisecond,
		DropOnOverflow: true,
	}
	
	// Create a mock metrics instance
	metricsConfig := DefaultMetricsConfig()
	metricsConfig.AsyncMetrics = nil
	
	metrics, err := NewValidationPerformanceMetrics(metricsConfig)
	if err != nil {
		b.Fatalf("Failed to create metrics: %v", err)
	}
	defer metrics.Shutdown()
	
	recorder := NewAsyncMetricRecorder(config, metrics)
	defer recorder.Shutdown()
	
	b.ResetTimer()
	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			recorder.RecordEvent(AsyncMetricEvent{
				Type:      "rule_execution",
				RuleID:    "bench-rule",
				Duration:  100 * time.Millisecond,
				Success:   true,
				Timestamp: time.Now(),
			})
		}
	})
}

// BenchmarkSyncMetricRecording benchmarks synchronous metric recording
func BenchmarkSyncMetricRecording(b *testing.B) {
	config := DefaultMetricsConfig()
	config.AsyncMetrics = nil // Disable async
	config.Level = MetricsLevelDebug // Force sync recording
	
	metrics, err := NewValidationPerformanceMetrics(config)
	if err != nil {
		b.Fatalf("Failed to create metrics: %v", err)
	}
	defer metrics.Shutdown()
	
	b.ResetTimer()
	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			metrics.RecordRuleExecution("bench-rule", 100*time.Millisecond, true)
		}
	})
}

// BenchmarkMemoryAllocation benchmarks memory allocation patterns
func BenchmarkMemoryAllocation(b *testing.B) {
	b.Run("AtomicCounter", func(b *testing.B) {
		b.ReportAllocs()
		for i := 0; i < b.N; i++ {
			counter := NewAtomicCounter()
			counter.Inc()
		}
	})
	
	b.Run("MutexCounter", func(b *testing.B) {
		b.ReportAllocs()
		for i := 0; i < b.N; i++ {
			counter := NewMutexCounter()
			counter.Inc()
		}
	})
	
	b.Run("AtomicRuleMetric", func(b *testing.B) {
		b.ReportAllocs()
		for i := 0; i < b.N; i++ {
			metric := NewRuleExecutionMetric("test")
			metric.RecordExecution(100*time.Millisecond, true)
		}
	})
	
	b.Run("MutexRuleMetric", func(b *testing.B) {
		b.ReportAllocs()
		for i := 0; i < b.N; i++ {
			metric := NewOldRuleExecutionMetric("test")
			metric.RecordExecution(100*time.Millisecond, true)
		}
	})
}

// BenchmarkContentionLevels benchmarks different contention levels
func BenchmarkContentionLevels(b *testing.B) {
	contentionLevels := []int{1, 2, 4, 8, 16, 32, 64}
	
	for _, level := range contentionLevels {
		b.Run("AtomicCounter_"+string(rune('0'+level)), func(b *testing.B) {
			counter := NewAtomicCounter()
			b.SetParallelism(level)
			b.ResetTimer()
			b.RunParallel(func(pb *testing.PB) {
				for pb.Next() {
					counter.Inc()
				}
			})
		})
		
		b.Run("MutexCounter_"+string(rune('0'+level)), func(b *testing.B) {
			counter := NewMutexCounter()
			b.SetParallelism(level)
			b.ResetTimer()
			b.RunParallel(func(pb *testing.PB) {
				for pb.Next() {
					counter.Inc()
				}
			})
		})
	}
}

// BenchmarkRawAtomicOperations benchmarks raw atomic operations for baseline
func BenchmarkRawAtomicOperations(b *testing.B) {
	var counter int64
	
	b.Run("AtomicAddInt64", func(b *testing.B) {
		b.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				atomic.AddInt64(&counter, 1)
			}
		})
	})
	
	b.Run("AtomicLoadInt64", func(b *testing.B) {
		b.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				_ = atomic.LoadInt64(&counter)
			}
		})
	})
	
	b.Run("AtomicStoreInt64", func(b *testing.B) {
		b.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				atomic.StoreInt64(&counter, int64(b.N))
			}
		})
	})
	
	b.Run("AtomicCompareAndSwapInt64", func(b *testing.B) {
		b.RunParallel(func(pb *testing.PB) {
			for pb.Next() {
				old := atomic.LoadInt64(&counter)
				atomic.CompareAndSwapInt64(&counter, old, old+1)
			}
		})
	})
}