package tools

import (
	"context"
	"fmt"
	"testing"
	"time"

	"github.com/ag-ui/go-sdk/pkg/core/events"
)

// MockEventHandler for testing
type MockEventHandler struct {
	startEvents []string
	argsEvents  []string
	endEvents   []string
	errors      []error
}

func NewMockEventHandler() *MockEventHandler {
	return &MockEventHandler{
		startEvents: make([]string, 0),
		argsEvents:  make([]string, 0),
		endEvents:   make([]string, 0),
		errors:      make([]error, 0),
	}
}

func (m *MockEventHandler) HandleToolCallStart(ctx context.Context, event *events.ToolCallStartEvent) error {
	m.startEvents = append(m.startEvents, event.ToolCallID)
	return nil
}

func (m *MockEventHandler) HandleToolCallArgs(ctx context.Context, event *events.ToolCallArgsEvent) error {
	m.argsEvents = append(m.argsEvents, event.ToolCallID)
	return nil
}

func (m *MockEventHandler) HandleToolCallEnd(ctx context.Context, event *events.ToolCallEndEvent) error {
	m.endEvents = append(m.endEvents, event.ToolCallID)
	return nil
}

func (m *MockEventHandler) ValidateEventSequence(ctx context.Context, toolCallID string, eventType events.EventType) error {
	return nil // Always allow for mock
}

// MockEventStorage for testing
type MockEventStorage struct {
	events map[string][]events.Event
}

func NewMockEventStorage() *MockEventStorage {
	return &MockEventStorage{
		events: make(map[string][]events.Event),
	}
}

func (s *MockEventStorage) StoreEvent(ctx context.Context, event events.Event) error {
	var toolCallID string
	switch e := event.(type) {
	case *events.ToolCallStartEvent:
		toolCallID = e.ToolCallID
	case *events.ToolCallArgsEvent:
		toolCallID = e.ToolCallID
	case *events.ToolCallEndEvent:
		toolCallID = e.ToolCallID
	default:
		return fmt.Errorf("unsupported event type: %T", event)
	}

	s.events[toolCallID] = append(s.events[toolCallID], event)
	return nil
}

func (s *MockEventStorage) GetEvents(ctx context.Context, toolCallID string) ([]events.Event, error) {
	events, exists := s.events[toolCallID]
	if !exists {
		return nil, fmt.Errorf("no events found for tool call %s", toolCallID)
	}
	return events, nil
}

func (s *MockEventStorage) GetEventSequence(ctx context.Context, toolCallID string) ([]events.EventType, error) {
	events, exists := s.events[toolCallID]
	if !exists {
		return nil, fmt.Errorf("no events found for tool call %s", toolCallID)
	}

	sequence := make([]events.EventType, len(events))
	for i, event := range events {
		sequence[i] = event.Type()
	}
	return sequence, nil
}

func TestEventEmitter_EmitToolCallStart(t *testing.T) {
	ctx := context.Background()
	mockHandler := NewMockEventHandler()
	mockStorage := NewMockEventStorage()

	emitter := NewDefaultEventEmitter(
		WithEventHandler(mockHandler),
		WithEventStorage(mockStorage),
	)

	toolCallID := "test-tool-call-1"
	toolName := "test-tool"
	params := map[string]interface{}{"param1": "value1"}

	err := emitter.EmitToolCallStart(ctx, toolCallID, toolName, params)
	if err != nil {
		t.Fatalf("Expected no error, got: %v", err)
	}

	// Check handler was called
	if len(mockHandler.startEvents) != 1 {
		t.Fatalf("Expected 1 start event, got %d", len(mockHandler.startEvents))
	}
	if mockHandler.startEvents[0] != toolCallID {
		t.Fatalf("Expected tool call ID %s, got %s", toolCallID, mockHandler.startEvents[0])
	}

	// Check storage was called
	storedEvents, err := mockStorage.GetEvents(ctx, toolCallID)
	if err != nil {
		t.Fatalf("Expected no error getting events, got: %v", err)
	}
	if len(storedEvents) != 1 {
		t.Fatalf("Expected 1 stored event, got %d", len(storedEvents))
	}
	if storedEvents[0].Type() != events.EventTypeToolCallStart {
		t.Fatalf("Expected start event type, got %v", storedEvents[0].Type())
	}
}

func TestEventEmitter_EmitToolCallArgs(t *testing.T) {
	ctx := context.Background()
	mockHandler := NewMockEventHandler()
	mockStorage := NewMockEventStorage()

	emitter := NewDefaultEventEmitter(
		WithEventHandler(mockHandler),
		WithEventStorage(mockStorage),
		WithValidation(false), // Disable validation for this test
	)

	toolCallID := "test-tool-call-2"
	delta := "test delta data"

	err := emitter.EmitToolCallArgs(ctx, toolCallID, delta)
	if err != nil {
		t.Fatalf("Expected no error, got: %v", err)
	}

	// Check handler was called
	if len(mockHandler.argsEvents) != 1 {
		t.Fatalf("Expected 1 args event, got %d", len(mockHandler.argsEvents))
	}
	if mockHandler.argsEvents[0] != toolCallID {
		t.Fatalf("Expected tool call ID %s, got %s", toolCallID, mockHandler.argsEvents[0])
	}

	// Check storage was called
	storedEvents, err := mockStorage.GetEvents(ctx, toolCallID)
	if err != nil {
		t.Fatalf("Expected no error getting events, got: %v", err)
	}
	if len(storedEvents) != 1 {
		t.Fatalf("Expected 1 stored event, got %d", len(storedEvents))
	}
	if storedEvents[0].Type() != events.EventTypeToolCallArgs {
		t.Fatalf("Expected args event type, got %v", storedEvents[0].Type())
	}
}

func TestEventEmitter_EmitToolCallEnd(t *testing.T) {
	ctx := context.Background()
	mockHandler := NewMockEventHandler()
	mockStorage := NewMockEventStorage()

	emitter := NewDefaultEventEmitter(
		WithEventHandler(mockHandler),
		WithEventStorage(mockStorage),
		WithValidation(false), // Disable validation for this test
	)

	toolCallID := "test-tool-call-3"
	result := &ToolExecutionResult{
		Success:   true,
		Duration:  time.Second,
		Timestamp: time.Now(),
	}

	err := emitter.EmitToolCallEnd(ctx, toolCallID, result)
	if err != nil {
		t.Fatalf("Expected no error, got: %v", err)
	}

	// Check handler was called
	if len(mockHandler.endEvents) != 1 {
		t.Fatalf("Expected 1 end event, got %d", len(mockHandler.endEvents))
	}
	if mockHandler.endEvents[0] != toolCallID {
		t.Fatalf("Expected tool call ID %s, got %s", toolCallID, mockHandler.endEvents[0])
	}

	// Check storage was called
	storedEvents, err := mockStorage.GetEvents(ctx, toolCallID)
	if err != nil {
		t.Fatalf("Expected no error getting events, got: %v", err)
	}
	if len(storedEvents) != 1 {
		t.Fatalf("Expected 1 stored event, got %d", len(storedEvents))
	}
	if storedEvents[0].Type() != events.EventTypeToolCallEnd {
		t.Fatalf("Expected end event type, got %v", storedEvents[0].Type())
	}
}

func TestEventEmitter_StreamingChunks(t *testing.T) {
	ctx := context.Background()
	mockHandler := NewMockEventHandler()
	mockStorage := NewMockEventStorage()

	emitter := NewDefaultEventEmitter(
		WithEventHandler(mockHandler),
		WithEventStorage(mockStorage),
		WithStreamingConfiguration(10, time.Millisecond), // Small chunks for testing
		WithValidation(false), // Disable validation for this test
	)

	toolCallID := "test-tool-call-streaming"
	largeDelta := "This is a large delta that should be split into multiple chunks for streaming"

	err := emitter.EmitToolCallArgs(ctx, toolCallID, largeDelta)
	if err != nil {
		t.Fatalf("Expected no error, got: %v", err)
	}

	// Check that multiple args events were created
	expectedChunks := (len(largeDelta) + 9) / 10 // Ceiling division
	if len(mockHandler.argsEvents) != expectedChunks {
		t.Fatalf("Expected %d args events for chunks, got %d", expectedChunks, len(mockHandler.argsEvents))
	}

	// Check that all chunks have the same tool call ID
	for i, eventToolCallID := range mockHandler.argsEvents {
		if eventToolCallID != toolCallID {
			t.Fatalf("Chunk %d has wrong tool call ID: expected %s, got %s", i, toolCallID, eventToolCallID)
		}
	}

	// Check storage
	storedEvents, err := mockStorage.GetEvents(ctx, toolCallID)
	if err != nil {
		t.Fatalf("Expected no error getting events, got: %v", err)
	}
	if len(storedEvents) != expectedChunks {
		t.Fatalf("Expected %d stored events for chunks, got %d", expectedChunks, len(storedEvents))
	}
}

func TestEventEmitter_ValidationErrors(t *testing.T) {
	ctx := context.Background()
	emitter := NewDefaultEventEmitter()

	// Test empty tool call name
	err := emitter.EmitToolCallStart(ctx, "test-id", "", nil)
	if err == nil {
		t.Fatal("Expected error for empty tool call name")
	}

	// Test empty tool call ID for args
	err = emitter.EmitToolCallArgs(ctx, "", "delta")
	if err == nil {
		t.Fatal("Expected error for empty tool call ID in args")
	}

	// Test empty delta
	err = emitter.EmitToolCallArgs(ctx, "test-id", "")
	if err == nil {
		t.Fatal("Expected error for empty delta")
	}

	// Test empty tool call ID for end
	err = emitter.EmitToolCallEnd(ctx, "", nil)
	if err == nil {
		t.Fatal("Expected error for empty tool call ID in end")
	}

	// Test nil result for end
	err = emitter.EmitToolCallEnd(ctx, "test-id", nil)
	if err == nil {
		t.Fatal("Expected error for nil result in end")
	}
}

func TestDefaultEventHandler_SequenceValidation(t *testing.T) {
	ctx := context.Background()
	handler := NewDefaultEventHandler()

	toolCallID := "test-sequence"

	// Test proper sequence: START -> ARGS -> END
	err := handler.ValidateEventSequence(ctx, toolCallID, events.EventTypeToolCallStart)
	if err != nil {
		t.Fatalf("Expected no error for start validation, got: %v", err)
	}

	// Simulate handling start event
	startEvent := events.NewToolCallStartEvent(toolCallID, "test-tool")
	err = handler.HandleToolCallStart(ctx, startEvent)
	if err != nil {
		t.Fatalf("Expected no error handling start event, got: %v", err)
	}

	// Test args after start
	err = handler.ValidateEventSequence(ctx, toolCallID, events.EventTypeToolCallArgs)
	if err != nil {
		t.Fatalf("Expected no error for args validation after start, got: %v", err)
	}

	// Simulate handling args event
	argsEvent := events.NewToolCallArgsEvent(toolCallID, "test-delta")
	err = handler.HandleToolCallArgs(ctx, argsEvent)
	if err != nil {
		t.Fatalf("Expected no error handling args event, got: %v", err)
	}

	// Test end after args
	err = handler.ValidateEventSequence(ctx, toolCallID, events.EventTypeToolCallEnd)
	if err != nil {
		t.Fatalf("Expected no error for end validation after args, got: %v", err)
	}

	// Simulate handling end event
	endEvent := events.NewToolCallEndEvent(toolCallID)
	err = handler.HandleToolCallEnd(ctx, endEvent)
	if err != nil {
		t.Fatalf("Expected no error handling end event, got: %v", err)
	}
}

func TestDefaultEventHandler_InvalidSequences(t *testing.T) {
	ctx := context.Background()
	handler := NewDefaultEventHandler()

	toolCallID := "test-invalid-sequence"

	// Test args before start
	err := handler.ValidateEventSequence(ctx, toolCallID, events.EventTypeToolCallArgs)
	if err == nil {
		t.Fatal("Expected error for args before start")
	}

	// Test end before start
	err = handler.ValidateEventSequence(ctx, toolCallID, events.EventTypeToolCallEnd)
	if err == nil {
		t.Fatal("Expected error for end before start")
	}

	// Start the tool call
	startEvent := events.NewToolCallStartEvent(toolCallID, "test-tool")
	err = handler.HandleToolCallStart(ctx, startEvent)
	if err != nil {
		t.Fatalf("Expected no error handling start event, got: %v", err)
	}

	// Test double start
	err = handler.ValidateEventSequence(ctx, toolCallID, events.EventTypeToolCallStart)
	if err == nil {
		t.Fatal("Expected error for double start")
	}
}

func TestEventMetrics(t *testing.T) {
	metrics := NewEventMetrics()

	toolCallID := "test-metrics"
	toolName := "test-tool"
	params := map[string]interface{}{"test": "value"}

	// Test start recording
	metrics.recordToolCallStart(toolCallID, toolName, params)
	
	snapshot := metrics.GetMetrics()
	if snapshot["totalEvents"] != int64(1) {
		t.Fatalf("Expected 1 total event, got %v", snapshot["totalEvents"])
	}
	if snapshot["startEvents"] != int64(1) {
		t.Fatalf("Expected 1 start event, got %v", snapshot["startEvents"])
	}

	// Test args recording
	metrics.recordToolCallArgs(toolCallID, 100)
	
	snapshot = metrics.GetMetrics()
	if snapshot["totalEvents"] != int64(2) {
		t.Fatalf("Expected 2 total events, got %v", snapshot["totalEvents"])
	}
	if snapshot["argsEvents"] != int64(1) {
		t.Fatalf("Expected 1 args event, got %v", snapshot["argsEvents"])
	}

	// Test end recording
	result := &ToolExecutionResult{Success: true}
	metrics.recordToolCallEnd(toolCallID, result)
	
	snapshot = metrics.GetMetrics()
	if snapshot["totalEvents"] != int64(3) {
		t.Fatalf("Expected 3 total events, got %v", snapshot["totalEvents"])
	}
	if snapshot["endEvents"] != int64(1) {
		t.Fatalf("Expected 1 end event, got %v", snapshot["endEvents"])
	}

	// Check that tool call was moved to completed
	if snapshot["activeCallCount"] != 0 {
		t.Fatalf("Expected 0 active calls, got %v", snapshot["activeCallCount"])
	}
	if snapshot["completedCallCount"] != 1 {
		t.Fatalf("Expected 1 completed call, got %v", snapshot["completedCallCount"])
	}
}

func TestInMemoryEventStorage(t *testing.T) {
	ctx := context.Background()
	storage := NewInMemoryEventStorage()

	toolCallID := "test-storage"
	
	// Store start event
	startEvent := events.NewToolCallStartEvent(toolCallID, "test-tool")
	err := storage.StoreEvent(ctx, startEvent)
	if err != nil {
		t.Fatalf("Expected no error storing start event, got: %v", err)
	}

	// Store args event
	argsEvent := events.NewToolCallArgsEvent(toolCallID, "test-delta")
	err = storage.StoreEvent(ctx, argsEvent)
	if err != nil {
		t.Fatalf("Expected no error storing args event, got: %v", err)
	}

	// Store end event
	endEvent := events.NewToolCallEndEvent(toolCallID)
	err = storage.StoreEvent(ctx, endEvent)
	if err != nil {
		t.Fatalf("Expected no error storing end event, got: %v", err)
	}

	// Retrieve events
	storedEvents, err := storage.GetEvents(ctx, toolCallID)
	if err != nil {
		t.Fatalf("Expected no error getting events, got: %v", err)
	}
	if len(storedEvents) != 3 {
		t.Fatalf("Expected 3 stored events, got %d", len(storedEvents))
	}

	// Check event types
	expectedTypes := []events.EventType{
		events.EventTypeToolCallStart,
		events.EventTypeToolCallArgs,
		events.EventTypeToolCallEnd,
	}
	
	for i, event := range storedEvents {
		if event.Type() != expectedTypes[i] {
			t.Fatalf("Expected event %d to be %v, got %v", i, expectedTypes[i], event.Type())
		}
	}

	// Test sequence retrieval
	sequence, err := storage.GetEventSequence(ctx, toolCallID)
	if err != nil {
		t.Fatalf("Expected no error getting sequence, got: %v", err)
	}
	if len(sequence) != 3 {
		t.Fatalf("Expected 3 events in sequence, got %d", len(sequence))
	}
	
	for i, eventType := range sequence {
		if eventType != expectedTypes[i] {
			t.Fatalf("Expected sequence event %d to be %v, got %v", i, expectedTypes[i], eventType)
		}
	}
}

func TestContextCancellation(t *testing.T) {
	// Test that operations respect context cancellation
	ctx, cancel := context.WithCancel(context.Background())
	emitter := NewDefaultEventEmitter()

	// Cancel context immediately
	cancel()

	// These should handle context cancellation gracefully
	err := emitter.EmitToolCallStart(ctx, "test-id", "test-tool", nil)
	// We don't expect an error here since the event emission itself doesn't check context
	// The context checking happens in handlers and storage

	// Test with a handler that checks context
	handler := NewDefaultEventHandler()
	err = handler.ValidateEventSequence(ctx, "test-id", events.EventTypeToolCallStart)
	if err == nil {
		t.Fatal("Expected error due to context cancellation")
	}
}

func TestConcurrentEventEmission(t *testing.T) {
	ctx := context.Background()
	emitter := NewDefaultEventEmitter(WithValidation(false))
	
	numGoroutines := 10
	numEventsPerGoroutine := 100
	
	done := make(chan bool, numGoroutines)
	
	// Start multiple goroutines emitting events concurrently
	for i := 0; i < numGoroutines; i++ {
		go func(routineID int) {
			defer func() { done <- true }()
			
			for j := 0; j < numEventsPerGoroutine; j++ {
				toolCallID := fmt.Sprintf("routine-%d-call-%d", routineID, j)
				
				// Emit start event
				err := emitter.EmitToolCallStart(ctx, toolCallID, "test-tool", nil)
				if err != nil {
					t.Errorf("Error emitting start event: %v", err)
					return
				}
				
				// Emit args event
				err = emitter.EmitToolCallArgs(ctx, toolCallID, "test-delta")
				if err != nil {
					t.Errorf("Error emitting args event: %v", err)
					return
				}
				
				// Emit end event
				result := &ToolExecutionResult{Success: true}
				err = emitter.EmitToolCallEnd(ctx, toolCallID, result)
				if err != nil {
					t.Errorf("Error emitting end event: %v", err)
					return
				}
			}
		}(i)
	}
	
	// Wait for all goroutines to complete
	for i := 0; i < numGoroutines; i++ {
		<-done
	}
	
	// Check metrics
	metrics := emitter.(*DefaultEventEmitter).metrics.GetMetrics()
	expectedTotalEvents := int64(numGoroutines * numEventsPerGoroutine * 3) // start + args + end
	
	if metrics["totalEvents"] != expectedTotalEvents {
		t.Fatalf("Expected %d total events, got %v", expectedTotalEvents, metrics["totalEvents"])
	}
}

// Benchmark tests
func BenchmarkEventEmission(b *testing.B) {
	ctx := context.Background()
	emitter := NewDefaultEventEmitter(WithValidation(false))
	
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		toolCallID := fmt.Sprintf("bench-call-%d", i)
		
		emitter.EmitToolCallStart(ctx, toolCallID, "bench-tool", nil)
		emitter.EmitToolCallArgs(ctx, toolCallID, "bench-delta")
		result := &ToolExecutionResult{Success: true}
		emitter.EmitToolCallEnd(ctx, toolCallID, result)
	}
}

func BenchmarkEventValidation(b *testing.B) {
	ctx := context.Background()
	handler := NewDefaultEventHandler()
	
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		toolCallID := fmt.Sprintf("bench-validation-%d", i)
		
		handler.ValidateEventSequence(ctx, toolCallID, events.EventTypeToolCallStart)
		
		// Simulate handling the start event
		startEvent := events.NewToolCallStartEvent(toolCallID, "bench-tool")
		handler.HandleToolCallStart(ctx, startEvent)
		
		handler.ValidateEventSequence(ctx, toolCallID, events.EventTypeToolCallArgs)
		
		// Simulate handling the args event
		argsEvent := events.NewToolCallArgsEvent(toolCallID, "bench-delta")
		handler.HandleToolCallArgs(ctx, argsEvent)
		
		handler.ValidateEventSequence(ctx, toolCallID, events.EventTypeToolCallEnd)
		
		// Simulate handling the end event
		endEvent := events.NewToolCallEndEvent(toolCallID)
		handler.HandleToolCallEnd(ctx, endEvent)
	}
}